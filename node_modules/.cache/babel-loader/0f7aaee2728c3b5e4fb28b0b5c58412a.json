{"ast":null,"code":"import _objectSpread from\"/root/Two-player-game-Halma/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/root/Two-player-game-Halma/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/root/Two-player-game-Halma/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/root/Two-player-game-Halma/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/root/Two-player-game-Halma/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/root/Two-player-game-Halma/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component,useEffect}from'react';import'./App.css';import io from'socket.io-client';// define variable for game playing process\nvar distanceX;var distanceY;var theOriginalX;var theOriginalY;var theMoveToX;var theMoveToY;var occupiedSpaces=[];var adjSpaces=[];var nextValidPath=[];var greenWins=false;var blackWins=false;var activeChesses;var nonActiveChesses;var playerRole;var socket;var endPoint='https://react-game-halma.herokuapp.com/';socket=io(endPoint);var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(props){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this,props));_this.getSpaces=function(){var spaces=[];for(var y=1;y<9;y++){for(var x=1;x<9;x++){spaces.push({className:\"space\",value:\"\",key:\"space-\".concat(x,\"-\").concat(y),location:\"(\".concat(x,\",\").concat(y,\")\"),locationX:x,locationY:y,isOccupied:false,isValidPath:false,style:{width:\"9vh\",height:\"9vh\",margin:\"0 auto\",borderRadius:\"50%\",// border: \"1px solid black\",\nbackgroundColor:\"#F2F2F2\",zIndex:1}});}}return{spaces:spaces};};_this.getChesses=function(){var chesses=[];var zones=[];for(var y=1;y<5;y++){for(var x=1;x<6-y;x++){// set up the zones for green area\nzones.push({key:\"zone-\".concat(x,\"-\").concat(y),// the locationX and locationY needs to be dynamically changed\nclassName:\"zone greenZone\",locationX:x,locationY:y,currentX:x,currentY:y,style:{width:\"9vh\",height:\"9vh\",margin:\"0 auto\",backgroundColor:\"#B2D977\",zIndex:0,top:\"\".concat((y-1)*10+0.5,\"vh\"),left:\"\".concat((x-1)*10+0.5,\"vh\"),position:\"absolute\"}});// set up the chesses for green area\nchesses.push({key:\"chess-\".concat(x,\"-\").concat(y),// the locationX and locationY needs to be dynamically changed\nisSelected:false,isMoved:false,className:\"chess Green\",value:'Green',OppoValue:'Black',locationX:x,locationY:y,currentX:x,currentY:y,// validPath: [],\nstyle:{width:\"9vh\",height:\"9vh\",margin:\"0 auto\",borderRadius:\"50%\",// border: \"1px solid black\",\nbackgroundColor:\"green\",zIndex:3,top:\"\".concat((y-1)*10+0.5,\"vh\"),left:\"\".concat((x-1)*10+0.5,\"vh\"),position:\"absolute\",transformOrigin:\"\".concat((x-1)*10,\"vh \").concat((x-1)*10,\"vh\")}});}}for(var _y=5;_y<9;_y++){for(var _x=8;_x>12-_y;_x--){zones.push({key:\"zone-\".concat(_x,\"-\").concat(_y),// the locationX and locationY needs to be dynamically changed\nclassName:\"zone blackZone\",locationX:_x,locationY:_y,currentX:_x,currentY:_y,style:{width:\"9vh\",height:\"9vh\",margin:\"0 auto\",backgroundColor:\"#8C8C8C\",zIndex:0,top:\"\".concat((_y-1)*10+0.5,\"vh\"),left:\"\".concat((_x-1)*10+0.5,\"vh\"),position:\"absolute\"}});chesses.push({key:\"chess-\".concat(_x,\"-\").concat(_y),// the locationX and locationY needs to be dynamically changed\nclassName:\"chess Black\",isMoved:false,isSelected:false,value:\"Black\",OppoValue:'Green',locationX:_x,locationY:_y,currentX:_x,currentY:_y,// validPath: [],\nstyle:{width:\"9vh\",height:\"9vh\",margin:\"0 auto\",borderRadius:\"50%\",// border: \"1px solid black\",\nbackgroundColor:\"black\",zIndex:3,top:\"\".concat((_y-1)*10+0.5,\"vh\"),left:\"\".concat((_x-1)*10+0.5,\"vh\"),position:\"absolute\",// transformOrigin: `(${locationX}-1)vh ${(locationY-1)*10}vh`\ntransformOrigin:\"\".concat((_x-1)*10,\"vh \").concat((_y-1)*10,\"vh\")}});}}return{chesses:chesses,zones:zones};};_this.chessMoveTo=function(locationX,locationY,isValidPath){return function(e){// change the instruction text \nvar instruTitle=document.querySelector('.instruTitle');instruTitle.innerHTML=\"<p>Click the chess to see the valid path<p>\";// if the space is valid, get the x and y distance and file the animation event\ntheMoveToX=locationX;theMoveToY=locationY;distanceX=(theMoveToX-theOriginalX)*10;distanceY=(theMoveToY-theOriginalY)*10;var selectedChess=document.querySelector(\".selectedChess\");if(selectedChess){// find out if the clicked space is valid\nif(isValidPath===true){socket.emit('chessMove',{id:selectedChess.id,distanceX:distanceX,distanceY:distanceY,newLocationX:theMoveToX,newLocationY:theMoveToY});selectedChess.classList.remove('selectedChess');// change the state of the selected Chess, so that the caculation of valid spaces points can be updated\n_this.setState({chesses:_this.state.chesses.map(function(chess){chess.isMoved=false;if(chess.isSelected===true){chess.currentX=locationX;chess.currentY=locationY;chess.isMoved=true;}return chess;})});// update the instruction and disable chesses \nvar instruction=document.querySelector('.instruction');// find out the one that's being moved\n_this.state.chesses.map(function(chess){if(chess.isMoved===true){instruction.innerHTML=\"\".concat(chess.OppoValue,\"'s turn!\");activeChesses=\"\".concat(chess.OppoValue);nonActiveChesses=\"\".concat(chess.value);}});// update the isValidPath state of spaces\n_this.setState({spaces:_this.state.spaces.map(function(space){space.isValidPath=false;space.className=\"space\";return space;})});// if one chess is moved, disable its group of chess and enable its opponent chesses\n_this.setState({chesses:_this.state.chesses.map(function(chess){if(chess.OppoValue===activeChesses){chess.className=\"chess \".concat(nonActiveChesses,\" disabled\");}else{chess.className=\"chess \".concat(activeChesses);}return chess;})});}}};};_this.selectChess=function(key,locationX,locationY,currentX,currentY,value){return function(e){// change the instruction text\nvar instruction=document.querySelector('.instruction');instruction.innerHTML=\"\\n                            <p>You can move to an adjacent space or jump over a single adjacent piece<p>\\n                            \";var instruTitle=document.querySelector('.instruTitle');instruTitle.innerHTML=\"Click on the valid space to move your chess\";// indicate which chess is being selected\nvar selectedChess=document.querySelector(\".selectedChess\");if(selectedChess){selectedChess.classList.remove('selectedChess');}e.target.classList.add('selectedChess');// store the current location into global variable\ntheOriginalX=locationX;theOriginalY=locationY;// change the state of the chess to indicate this is the one that's being selected\n_this.setState({chesses:_this.state.chesses.map(function(chess){chess.isSelected=false;if(chess.key===key){chess.isSelected=true;}return chess;})});// update the isValidPath state of spaces， 每次点击一颗棋子，都要把所有空格的isValidPath先统一改成false\n_this.setState({spaces:_this.state.spaces.map(function(space){space.isValidPath=false;space.className=\"space\";return space;})});// find out the valid destination spaces\n_this.validPathCheck(currentX,currentY);};};_this.selfCheck=function(x,y){if(x>0&&x<9&&y>0&&y<9){return true;}};_this.occupiedCheck=function(array){array.map(function(item){_this.setState({spaces:_this.state.spaces.map(function(space){if(space.location===item){// console.log(space);\nif(space.isOccupied===false){// validPath.push(space);\nspace.isValidPath=true;space.className=\"chess isValidPath\";}}return space;})});});};_this.getAdjOccupiedSpaces=function(array,x,y){var adjOccupiedSpaces=[];array.map(function(item){_this.setState({spaces:_this.state.spaces.map(function(space){if(space.location===item){// console.log(space);\nif(space.isOccupied===true){adjOccupiedSpaces.push(item);}}return space;})});});_this.nextPossbileMoveCheck(adjOccupiedSpaces,x,y);};_this.nextValidPathCheck=function(array){array.map(function(item){_this.setState({spaces:_this.state.spaces.map(function(space){if(space.location===item){// console.log(space);\n// 如果空格上没有棋子并且这个空格不是当前已经跳过的路径，那么收入nextValidPath\nif(space.isOccupied===false&&!nextValidPath.includes(item)){nextValidPath.push(item);space.isValidPath=true;space.className=\"chess isValidPath\";_this.adjSpaceCheck(parseInt(item[1]),parseInt(item[3]));_this.getAdjOccupiedSpaces(adjSpaces,parseInt(item[1]),parseInt(item[3]));}}return space;})});});// console.log(nextValidPath);\n};_this.nextPossbileMoveCheck=function(array,x,y){var nextPossbileMove0=[];var nextPossbileMove=[];array.map(function(item){if(item===\"(\".concat(x-1,\",\").concat(y-1,\")\")){nextPossbileMove0.push(\"(\".concat(x-2,\",\").concat(y-2,\")\"));}else if(item===\"(\".concat(x-1,\",\").concat(y,\")\")){nextPossbileMove0.push(\"(\".concat(x-2,\",\").concat(y,\")\"));}else if(item===\"(\".concat(x-1,\",\").concat(y+1,\")\")){nextPossbileMove0.push(\"(\".concat(x-2,\",\").concat(y+2,\")\"));}else if(item===\"(\".concat(x+1,\",\").concat(y,\")\")){nextPossbileMove0.push(\"(\".concat(x+2,\",\").concat(y,\")\"));}else if(item===\"(\".concat(x+1,\",\").concat(y+1,\")\")){nextPossbileMove0.push(\"(\".concat(x+2,\",\").concat(y+2,\")\"));}else if(item===\"(\".concat(x+1,\",\").concat(y-1,\")\")){nextPossbileMove0.push(\"(\".concat(x+2,\",\").concat(y-2,\")\"));}else if(item===\"(\".concat(x,\",\").concat(y-1,\")\")){nextPossbileMove0.push(\"(\".concat(x,\",\").concat(y-2,\")\"));}else if(item===\"(\".concat(x,\",\").concat(y+1,\")\")){nextPossbileMove0.push(\"(\".concat(x,\",\").concat(y+2,\")\"));}});// console.log(`next possible move 0 ${nextPossbileMove0}`);\n// 把墙外的可能的点都淘汰，剩下的都是墙内的可能的点\nnextPossbileMove0.forEach(function(item){if(_this.selfCheck(parseInt(item[1]),parseInt(item[3]))===true){nextPossbileMove.push(item);}});// console.log(`next possible move 1 ${nextPossbileMove}`);\n// 对墙内可能的点，进行occupied排查\nif(nextPossbileMove.length>0){_this.nextValidPathCheck(nextPossbileMove);}else{return;}};_this.adjSpaceCheck=function(x,y){adjSpaces=[];if(x-1>0){adjSpaces.push(\"(\".concat(x-1,\",\").concat(y,\")\"));if(y+1<9){adjSpaces.push(\"(\".concat(x-1,\",\").concat(y+1,\")\"));}if(y-1>0){adjSpaces.push(\"(\".concat(x-1,\",\").concat(y-1,\")\"));}}if(x+1<9){adjSpaces.push(\"(\".concat(x+1,\",\").concat(y,\")\"));if(y+1<9){adjSpaces.push(\"(\".concat(x+1,\",\").concat(y+1,\")\"));}if(y-1>0){adjSpaces.push(\"(\".concat(x+1,\",\").concat(y-1,\")\"));}}if(y-1>0){adjSpaces.push(\"(\".concat(x,\",\").concat(y-1,\")\"));}if(y+1<9){adjSpaces.push(\"(\".concat(x,\",\").concat(y+1,\")\"));}// console.log(adjSpaces);\n// this.getAdjOccupiedSpaces (adjSpaces, x, y);\n};_this.validPathCheck=function(x,y){var adjOccupiedSpaces=[];nextValidPath=[];_this.adjSpaceCheck(x,y);/*返回adjSpaces[], 不可能是空值 */ // check if the spaces in the ajacent spaces is occupied or not, if it's not occuppied, than make it valid, if it's occupied, position the next possible move\nadjSpaces.map(function(item){_this.setState({spaces:_this.state.spaces.map(function(space){if(space.location===item){// console.log(space);\nif(space.isOccupied===false){// validPath.push(space);\nspace.isValidPath=true;space.className=\"chess isValidPath\";}else{adjOccupiedSpaces.push(item);}}return space;})});});// console.log(adjOccupiedSpaces);\n// 把附近的occupied的格子储存放到一个数组中，然后计算这颗棋子要以这些格子作为基点分别怎么跳\nif(adjOccupiedSpaces.length>0){_this.nextPossbileMoveCheck(adjOccupiedSpaces,x,y);}else{return;}};_this.checkIfOccupied=function(){occupiedSpaces=[];_this.state.spaces.map(function(space){_this.state.chesses.map(function(chess){if(space.locationX===chess.currentX&&space.locationY===chess.currentY){occupiedSpaces.push(space);space.value=chess.value;}});});_this.setState({spaces:_this.state.spaces.map(function(space){if(occupiedSpaces.includes(space)){space.isOccupied=true;}else{space.isOccupied=false;}return space;})});return occupiedSpaces;};_this.checkIfWinner=function(){var blackBonusPoints=0;var greenBonusPoints=0;var _loop=function _loop(y){var _loop3=function _loop3(x){var theSpace=_this.state.spaces.filter(function(space){return space.locationX===x&&space.locationY===y;});// console.log(theSpace);\nif(theSpace[0].isOccupied&&theSpace[0].value==='Black'){blackBonusPoints++;// console.log(`blackpionts: ${blackBonusPoints}`);\n}};for(var x=1;x<6-y;x++){_loop3(x);}};for(var y=1;y<5;y++){_loop(y);}var _loop2=function _loop2(_y2){var _loop4=function _loop4(x){var theSpace=_this.state.spaces.filter(function(space){return space.locationX===x&&space.locationY===_y2;});// console.log(theSpace);\nif(theSpace[0].isOccupied&&theSpace[0].value==='Green'){greenBonusPoints++;// console.log(`greenPoints: ${greenBonusPoints}`);\n}};for(var x=8;x>12-_y2;x--){_loop4(x);}};for(var _y2=5;_y2<9;_y2++){_loop2(_y2);}if(blackBonusPoints===10){blackWins=true;_this.gameOver();return;}if(greenBonusPoints===10){greenWins=true;_this.gameOver();return;}};_this.handleMove=function(data){document.querySelectorAll(\".chess\").forEach(function(chess){chess.style.boxShadow=\"none\";});document.querySelector(\"#\".concat(data.id)).style.transform=\"translate3d(\"+data.distanceX+\"vh, \"+data.distanceY+\"vh, 0)\";document.querySelector(\"#\".concat(data.id)).style.boxShadow=\"0px 0px 10px 10px orange\";console.log('moved');_this.setState({chesses:_this.state.chesses.map(function(chess){chess.isMoved=false;if(chess.key==data.id){chess.currentX=data.newLocationX;chess.currentY=data.newLocationY;chess.isMoved=true;var instruction=document.querySelector('.instruction');instruction.innerHTML=\"\".concat(chess.OppoValue,\"'s turn!\");activeChesses=\"\".concat(chess.OppoValue);nonActiveChesses=\"\".concat(chess.value);}return chess;})});_this.setState({chesses:_this.state.chesses.map(function(chess){if(chess.OppoValue===activeChesses){chess.className=\"chess \".concat(nonActiveChesses,\" disabled\");}else{chess.className=\"chess \".concat(activeChesses);}return chess;})});};_this.playConnect=function(){document.querySelector('.player-connect').innerHTML='The room has two players, ready to start the game';document.querySelector('.blackPlayer').style.pointerEvents='auto';document.querySelector('.greenPlayer').style.pointerEvents='auto';};_this.playDisconnect=function(){document.querySelector('.player-connect').style.display='block';document.querySelector('.player-connect').innerHTML='Your partner player left the room... game stopped';document.querySelector('.wallPaper').style.display='flex';document.querySelector('.greenPlayer').style.display='none';document.querySelector('.blackPlayer').style.display='none';document.querySelector('.restart').style.display='block';};_this.freezeScreen=function(){document.querySelector('.wallPaper').style.display='flex';document.querySelectorAll('.start').forEach(function(e){e.style.display='none';});document.querySelector('.restart').style.display='none';};_this.unFreezeScreen=function(){document.querySelector('.wallPaper').style.display='none';var instruction=document.querySelector('.instruction');instruction.style.display='block';instruction.innerHTML=\"\".concat(playerRole,\"'s turn!\");};_this.informRole=function(data){// indicate the opponent user what player option left\nif(data.player=='green'){document.querySelector('.greenPlayer').style.display='none';}else if(data.player==='black'){document.querySelector('.blackPlayer').style.display='none';}};_this.state={spaces:[],chesses:[],zones:[]};return _this;}// all methods of the app component go in this section\n_createClass(App,[{key:\"displayRules\",value:function displayRules(){var gameRuleDetail=document.querySelector('.gameRuleDetail');var ruleBtn=document.querySelector('.ruleBtn');if(gameRuleDetail.style.display===\"none\"){gameRuleDetail.style.display=\"block\";ruleBtn.value=\"HIDE RULES\";}else{gameRuleDetail.style.display=\"none\";ruleBtn.value=\"GAME RULES\";}}},{key:\"gameStart\",value:function gameStart(e){var wallPaper=document.querySelector('.wallPaper');var blackWinMsg=document.querySelector('.blackWins');var greenWinMsg=document.querySelector('.greenWins');var playerConncect=document.querySelector('.player-connect');blackWinMsg.style.display='none';greenWinMsg.style.display='none';playerConncect.style.display='none';greenWins=false;blackWins=false;// change the text in the instruction cards\nvar instruTitle=document.querySelector('.instruTitle');// socket emmit \nif(e.target.id==='greenPlayer'){playerRole='Green';socket.emit('gameStart',{player:'green'});instruTitle.innerHTML=\"<p>Your Are Green Player<p>\";document.querySelectorAll('.start').forEach(function(e){e.style.display='none';});document.querySelector('.restart').style.display='none';// if it's a green player, freeze the black section\ndocument.querySelectorAll('.Black').forEach(function(e){e.style.pointerEvents='none';});}else{playerRole='Black';socket.emit('gameStart',{player:'black'});instruTitle.innerHTML=\"<p>Your Are Black Player<p>\";document.querySelectorAll('.start').forEach(function(e){e.style.display='none';});document.querySelector('.restart').style.display='none';// if it's a black player, freeze the green section\ndocument.querySelectorAll('.Green').forEach(function(e){e.style.pointerEvents='none';});}}},{key:\"gameOver\",value:function gameOver(){var wallPaper=document.querySelector('.wallPaper');var blackWinMsg=document.querySelector('.blackWins');var greenWinMsg=document.querySelector('.greenWins');var restart=document.querySelector('.restart');wallPaper.style.display='flex';restart.style.display='block';document.querySelectorAll('.start').forEach(function(e){e.style.display='none';});if(blackWins){blackWinMsg.style.display='block';}if(greenWins){greenWinMsg.style.display='block';}}},{key:\"gameRestart\",value:function gameRestart(){window.location.reload(false);}},{key:\"componentDidMount\",value:function componentDidMount(){this.setState(_objectSpread({},this.getSpaces(),{},this.getChesses()));// update the isOccupied state of spaces constantly\nsetInterval(this.checkIfOccupied,100);// check winners constantly\nsetInterval(this.checkIfWinner,100);// initilize the content in instruction card\nvar ruleBtn=document.querySelector('.ruleBtn');ruleBtn.value=\"GAME RULES\";var instruction=document.querySelector('.instruction');instruction.innerHTML=\"\";var instruTitle=document.querySelector('.instruTitle');instruTitle.innerHTML=\"<p>Let's Play Halma! <p>\";// listerning to socket events -- chess moving \nsocket.on('chessMove',this.handleMove);// listerning to socket events -- rival player enter\nsocket.on('player-connect',this.playConnect);// listerning to socket events -- rival player left\nsocket.on('player-disconnect',this.playDisconnect);// listerning to socket events -- freezeScreen\nsocket.on('freezeScreen',this.freezeScreen);// listerning to socket events -- unfreezeScreen\nsocket.on('unFreezeScreen',this.unFreezeScreen);// listerning to socket events -- informRole\nsocket.on('informRole',this.informRole);}/********************************* define socket events ********************************************************/},{key:\"render\",value:function render(){var _this2=this;var _this$state=this.state,spaces=_this$state.spaces,chesses=_this$state.chesses,zones=_this$state.zones;var positionSpaces=spaces.map(function(space,index){var key=space.key,style=space.style,locationX=space.locationX,locationY=space.locationY,className=space.className,isValidPath=space.isValidPath;var reactDom=React.createElement(\"div\",{key:key,className:className,onClick:_this2.chessMoveTo(locationX,locationY,isValidPath),style:_objectSpread({},style)});return reactDom;});var positionChesses=chesses.map(function(chess,index){var key=chess.key,style=chess.style,locationX=chess.locationX,locationY=chess.locationY,currentX=chess.currentX,currentY=chess.currentY,className=chess.className,value=chess.value;var reactDom=React.createElement(\"div\",{value:value,id:key,key:key,className:className,onClick:_this2.selectChess(key,locationX,locationY,currentX,currentY),style:_objectSpread({},style)});return reactDom;});var positionZones=zones.map(function(zone,index){var key=zone.key,style=zone.style,className=zone.className;var reactDom=React.createElement(\"div\",{key:key,className:className,style:_objectSpread({},style)});return reactDom;});return React.createElement(\"div\",{className:\"App\"},React.createElement(\"div\",{className:\"wallPaper\"},React.createElement(\"h1\",{className:\"greenWins\"},\"Congrats! Green Wins!\"),React.createElement(\"h1\",{className:\"blackWins\"},\"Congrats! Black Wins!\"),React.createElement(\"button\",{id:\"blackPlayer\",className:\"start blackPlayer\",onClick:this.gameStart},\"Play As Black\"),React.createElement(\"button\",{id:\"greenPlayer\",className:\"start greenPlayer\",onClick:this.gameStart},\"Play As Green\"),React.createElement(\"button\",{className:\"restart wallBtn\",onClick:this.gameRestart},\"RESTART\")),React.createElement(\"div\",{className:\"boardWrapper\"},React.createElement(\"div\",{className:\"board\"},positionSpaces,positionChesses,positionZones)),React.createElement(\"div\",{className:\"rule\"},React.createElement(\"h1\",{className:\"gameTitle\"},\"Halma\"),React.createElement(\"h3\",{className:\"player-connect\"},\"Waiting Another Player...\"),React.createElement(\"h1\",{className:\"instruTitle\"}),React.createElement(\"div\",{className:\"instruction\"}),React.createElement(\"div\",{className:\"gameRules\"},React.createElement(\"input\",{className:\"ruleBtn\",type:\"button\",onClick:this.displayRules})),React.createElement(\"ul\",{className:\"gameRuleDetail\"},React.createElement(\"li\",null,\"(i) A piece may be moved to an adjacent square, horizontally, vertically or diagonally;\"),React.createElement(\"li\",null,\"(ii) A piece may jump over a single adjacent piece of any colour, horizontally, vertically or diagonally, into the empty square beyond. Multiple jump over is allowable, as long as it is consistent.\"),React.createElement(\"li\",null,\"(iii) The game is over when a player has moved all of his pieces into his opponent's marked starting positions\"))));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/root/Two-player-game-Halma/src/App.js"],"names":["React","Component","useEffect","io","distanceX","distanceY","theOriginalX","theOriginalY","theMoveToX","theMoveToY","occupiedSpaces","adjSpaces","nextValidPath","greenWins","blackWins","activeChesses","nonActiveChesses","playerRole","socket","endPoint","App","props","getSpaces","spaces","y","x","push","className","value","key","location","locationX","locationY","isOccupied","isValidPath","style","width","height","margin","borderRadius","backgroundColor","zIndex","getChesses","chesses","zones","currentX","currentY","top","left","position","isSelected","isMoved","OppoValue","transformOrigin","chessMoveTo","e","instruTitle","document","querySelector","innerHTML","selectedChess","emit","id","newLocationX","newLocationY","classList","remove","setState","state","map","chess","instruction","space","selectChess","target","add","validPathCheck","selfCheck","occupiedCheck","array","item","getAdjOccupiedSpaces","adjOccupiedSpaces","nextPossbileMoveCheck","nextValidPathCheck","includes","adjSpaceCheck","parseInt","nextPossbileMove0","nextPossbileMove","forEach","length","checkIfOccupied","checkIfWinner","blackBonusPoints","greenBonusPoints","theSpace","filter","gameOver","handleMove","data","querySelectorAll","boxShadow","transform","console","log","playConnect","pointerEvents","playDisconnect","display","freezeScreen","unFreezeScreen","informRole","player","gameRuleDetail","ruleBtn","wallPaper","blackWinMsg","greenWinMsg","playerConncect","restart","window","reload","setInterval","on","positionSpaces","index","reactDom","positionChesses","positionZones","zone","gameStart","gameRestart","displayRules"],"mappings":"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","sourcesContent":["import React, {Component, useEffect} from 'react';\nimport './App.css';\nimport io from 'socket.io-client';\n\n// define variable for game playing process\nlet distanceX;\nlet distanceY;\nlet theOriginalX;\nlet theOriginalY;\nlet theMoveToX;\nlet theMoveToY;\nlet occupiedSpaces=[];\nlet adjSpaces = [];\nlet nextValidPath = [];\nlet greenWins = false;\nlet blackWins = false;\nlet activeChesses;\nlet nonActiveChesses;\nlet playerRole;\nlet socket; \nconst endPoint = 'https://react-game-halma.herokuapp.com/';\nsocket= io(endPoint);\n\n\n\n\nclass App extends Component {\n\n  constructor (props){\n    super(props);\n    this.state = {\n      spaces:[],\n      chesses:[],\n      zones:[],\n    }\n\n  }\n\n  // all methods of the app component go in this section\n  getSpaces = () => {\n    let spaces = [];\n    for (let y=1; y<9; y++) {\n      for (let x=1; x<9; x++){\n        spaces.push({\n          className: `space`,\n          value:``,\n          key: `space-${x}-${y}`,\n          location: `(${x},${y})`,\n          locationX: x,\n          locationY: y,\n          isOccupied: false,\n          isValidPath:false,\n          style:{\n            width:`9vh`,\n            height:`9vh`,\n            margin: `0 auto`,\n            borderRadius: `50%`,\n            // border: \"1px solid black\",\n            backgroundColor: \"#F2F2F2\",\n            zIndex:1\n          }\n        })\n      }\n    }\n    return {spaces};\n  }\n\n  getChesses = () => {\n    let chesses = [];\n    let zones =[];\n    for (let y=1; y<5; y++) {\n      for (let x=1; x<(6-y); x++){\n\n        // set up the zones for green area\n        zones.push({\n          key: `zone-${x}-${y}`,\n          // the locationX and locationY needs to be dynamically changed\n          className: `zone greenZone`,\n          locationX: x,\n          locationY: y,\n          currentX: x,\n          currentY: y,\n          style:{\n            width:`9vh`,\n            height:`9vh`,\n            margin: `0 auto`,\n            backgroundColor: \"#B2D977\",\n            zIndex:0,\n            top: `${(y-1)*10+0.5}vh`,\n            left: `${(x-1)*10+0.5}vh`,\n            position:`absolute`,\n          }\n        });\n\n        // set up the chesses for green area\n        chesses.push({\n          key: `chess-${x}-${y}`,\n          // the locationX and locationY needs to be dynamically changed\n          isSelected:false,\n          isMoved:false,\n          className: `chess Green`,\n          value:'Green',\n          OppoValue:'Black',\n          locationX: x,\n          locationY: y,\n          currentX: x,\n          currentY: y,\n          // validPath: [],\n          style:{\n            width:`9vh`,\n            height:`9vh`,\n            margin: `0 auto`,\n            borderRadius: `50%`,\n            // border: \"1px solid black\",\n            backgroundColor: \"green\",\n            zIndex:3,\n            top: `${(y-1)*10+0.5}vh`,\n            left: `${(x-1)*10+0.5}vh`,\n            position:`absolute`,\n            transformOrigin: `${(x-1)*10}vh ${(x-1)*10}vh`\n          }\n        })\n      }\n    }\n\n    for (let y=5; y<9; y++) {\n      for (let x=8; x>(12-y); x--){\n\n        zones.push({\n          key: `zone-${x}-${y}`,\n          // the locationX and locationY needs to be dynamically changed\n          className: `zone blackZone`,\n          locationX: x,\n          locationY: y,\n          currentX: x,\n          currentY: y,\n          style:{\n            width:`9vh`,\n            height:`9vh`,\n            margin: `0 auto`,\n            backgroundColor: \"#8C8C8C\",\n            zIndex:0,\n            top: `${(y-1)*10+0.5}vh`,\n            left: `${(x-1)*10+0.5}vh`,\n            position:`absolute`,\n          }\n        });\n\n        chesses.push({\n          key: `chess-${x}-${y}`,\n          // the locationX and locationY needs to be dynamically changed\n          className: `chess Black`,\n          isMoved:false,\n          isSelected:false,\n          value:`Black`,\n          OppoValue:'Green',\n          locationX: x,\n          locationY: y,\n          currentX: x,\n          currentY: y,\n          // validPath: [],\n          style:{\n            width:`9vh`,\n            height:`9vh`,\n            margin: `0 auto`,\n            borderRadius: `50%`,\n            // border: \"1px solid black\",\n            backgroundColor: \"black\",\n            zIndex:3,\n            top: `${(y-1)*10+0.5}vh`,\n            left: `${(x-1)*10+0.5}vh`,\n            position:`absolute`,\n            // transformOrigin: `(${locationX}-1)vh ${(locationY-1)*10}vh`\n            transformOrigin: `${(x-1)*10}vh ${(y-1)*10}vh`\n          }\n        })\n      }\n    }\n    return {chesses,zones};\n  }\n\n  chessMoveTo = (locationX, locationY, isValidPath) => (e) => {\n      // change the instruction text \n    const instruTitle = document.querySelector('.instruTitle');\n    instruTitle.innerHTML = \n    `<p>Click the chess to see the valid path<p>`;\n\n      // if the space is valid, get the x and y distance and file the animation event\n      theMoveToX = locationX;\n      theMoveToY = locationY;\n      distanceX = (theMoveToX - theOriginalX)*10;\n      distanceY = (theMoveToY - theOriginalY)*10;\n      const selectedChess = document.querySelector(`.selectedChess`);\n      if (selectedChess) {\n        // find out if the clicked space is valid\n        if (isValidPath === true) {\n          socket.emit('chessMove', {\n            id: selectedChess.id,\n            distanceX:distanceX,\n            distanceY:distanceY,\n            newLocationX: theMoveToX,\n            newLocationY: theMoveToY\n          });\n\n          selectedChess.classList.remove('selectedChess');\n            // change the state of the selected Chess, so that the caculation of valid spaces points can be updated\n          this.setState({\n            chesses: this.state.chesses.map((chess)=>{\n              chess.isMoved = false;\n              if(chess.isSelected === true){\n                chess.currentX = locationX;\n                chess.currentY = locationY;\n                chess.isMoved = true;\n              }\n              return chess;\n            }) \n          });\n          \n        // update the instruction and disable chesses \n        const instruction = document.querySelector('.instruction');\n          // find out the one that's being moved\n          this.state.chesses.map((chess)=> {\n            if(chess.isMoved === true) {\n              instruction.innerHTML = `${chess.OppoValue}'s turn!`;\n              activeChesses = `${chess.OppoValue}`;\n              nonActiveChesses = `${chess.value}`;\n            }\n          })\n\n        // update the isValidPath state of spaces\n        this.setState({\n          spaces: this.state.spaces.map((space)=>{\n            space.isValidPath = false;\n            space.className = `space`;\n            return space;\n          })\n        });\n\n        // if one chess is moved, disable its group of chess and enable its opponent chesses\n        this.setState({\n          chesses: this.state.chesses.map((chess) => {\n            if(chess.OppoValue === activeChesses){\n              chess.className = `chess ${nonActiveChesses} disabled`;\n            }else {\n              chess.className = `chess ${activeChesses}`;\n            }\n            return chess;\n          })\n        })\n      }\n\n    } \n    \n\n  }\n\n  selectChess = (key,locationX, locationY, currentX, currentY, value) => (e) => {\n    // change the instruction text\n    const instruction = document.querySelector('.instruction');\n    instruction.innerHTML = `\n                            <p>You can move to an adjacent space or jump over a single adjacent piece<p>\n                            `;\n\n    const instruTitle = document.querySelector('.instruTitle');\n    instruTitle.innerHTML = \"Click on the valid space to move your chess\";\n\n    // indicate which chess is being selected\n    const selectedChess = document.querySelector(`.selectedChess`);\n    if (selectedChess) {\n      selectedChess.classList.remove('selectedChess');\n    }\n    e.target.classList.add('selectedChess');\n\n    // store the current location into global variable\n    theOriginalX = locationX;\n    theOriginalY = locationY;\n\n    // change the state of the chess to indicate this is the one that's being selected\n    this.setState({\n      chesses: this.state.chesses.map((chess)=>{\n        chess.isSelected = false;\n        if(chess.key === key){\n          chess.isSelected = true;\n        }\n        return chess;\n      })\n    });\n\n    // update the isValidPath state of spaces， 每次点击一颗棋子，都要把所有空格的isValidPath先统一改成false\n    this.setState({\n      spaces: this.state.spaces.map((space)=>{\n        space.isValidPath = false;\n        space.className = `space`;\n        return space;\n      })\n    });\n\n    // find out the valid destination spaces\n    this.validPathCheck(currentX, currentY);\n  }\n\n  selfCheck = (x,y) => {\n    if(x>0 && x<9 && y>0 && y<9) {\n      return true;\n    }\n  }\n\n\n  // occupiedCheck to see if the spaces is occupied or not, if not, than make the space valid, if it is occupied, then nothing happend\n  occupiedCheck = (array) => {\n    array.map((item) => {\n      this.setState({\n        spaces: this.state.spaces.map((space)=>{\n            if(space.location === item){\n              // console.log(space);\n              if(space.isOccupied === false) {\n                // validPath.push(space);\n                space.isValidPath = true;\n                space.className = `chess isValidPath`;\n              }\n            }\n            return space\n        })\n      })\n    })\n  }\n\n\n\n\n  getAdjOccupiedSpaces = (array,x,y) => {\n    let adjOccupiedSpaces =[];\n\n    array.map((item) => {\n        this.setState({\n          spaces: this.state.spaces.map((space)=>{\n              if(space.location === item){\n                // console.log(space);\n                if(space.isOccupied === true) {\n                  adjOccupiedSpaces.push(item);\n                }\n              }\n              return space\n          })\n        })\n    })\n\n    this.nextPossbileMoveCheck(adjOccupiedSpaces,x,y);\n\n  }\n\n  // 传入一组墙内的有可能跳进去的目标点，检查这些目标点是否occupied，把空的格子放到一个数组中nextValidPath,对这个数组内的每个格子，设想他们都是棋子，对他们进行下一轮检测\n  nextValidPathCheck = (array) => {\n    \n\n    array.map((item)=>{\n        this.setState({\n          spaces: this.state.spaces.map((space)=>{\n              if(space.location === item){\n                // console.log(space);\n                // 如果空格上没有棋子并且这个空格不是当前已经跳过的路径，那么收入nextValidPath\n                if(space.isOccupied === false && !nextValidPath.includes(item)) {\n                  nextValidPath.push(item);\n                  space.isValidPath = true;\n                  space.className = `chess isValidPath`;\n                  this.adjSpaceCheck(parseInt(item[1]), parseInt(item[3]));\n                  this.getAdjOccupiedSpaces (adjSpaces, parseInt(item[1]), parseInt(item[3]));\n                }\n              }\n              return space\n          })\n        })\n    })\n\n    // console.log(nextValidPath);\n\n  }\n\n  // 传入一组身边的occupied的格子，计算以这些格子为基点，分别怎么跳\n  nextPossbileMoveCheck = (array, x, y) => {\n    let nextPossbileMove0 = [];\n    let nextPossbileMove = [];\n    array.map((item) => {\n      if(item === `(${x-1},${y-1})`){\n        nextPossbileMove0.push(`(${x-2},${y-2})`)\n      }else if(item === `(${x-1},${y})`){\n        nextPossbileMove0.push(`(${x-2},${y})`)\n      }else if(item === `(${x-1},${y+1})`){\n        nextPossbileMove0.push(`(${x-2},${y+2})`)\n      }else if(item === `(${x+1},${y})`){\n        nextPossbileMove0.push(`(${x+2},${y})`)\n      }else if(item === `(${x+1},${y+1})`){\n        nextPossbileMove0.push(`(${x+2},${y+2})`)\n      }else if(item === `(${x+1},${y-1})`){\n        nextPossbileMove0.push(`(${x+2},${y-2})`)\n      }else if(item === `(${x},${y-1})`){\n        nextPossbileMove0.push(`(${x},${y-2})`)\n      }else if(item === `(${x},${y+1})`){\n        nextPossbileMove0.push(`(${x},${y+2})`)\n      }\n    })\n\n    // console.log(`next possible move 0 ${nextPossbileMove0}`);\n\n    // 把墙外的可能的点都淘汰，剩下的都是墙内的可能的点\n    nextPossbileMove0.forEach((item)=>{\n      if(this.selfCheck(parseInt(item[1]), parseInt(item[3]))===true){\n        nextPossbileMove.push(item);\n      }\n    })\n\n    // console.log(`next possible move 1 ${nextPossbileMove}`);\n\n    // 对墙内可能的点，进行occupied排查\n    if(nextPossbileMove.length>0) {\n      this.nextValidPathCheck(nextPossbileMove)\n    }else {\n      return;\n    }\n    \n  }\n  // store the ajacent spaces into adjSpaces\n  adjSpaceCheck = (x,y) => {\n    adjSpaces = [];\n    if(x-1>0) {\n      adjSpaces.push(`(${x-1},${y})`);\n      if(y+1<9){\n        adjSpaces.push(`(${x-1},${y+1})`);\n      }\n      if(y-1>0){\n        adjSpaces.push(`(${x-1},${y-1})`);\n      }\n    }\n\n    if(x+1<9) {\n      adjSpaces.push(`(${x+1},${y})`);\n      if(y+1<9){\n        adjSpaces.push(`(${x+1},${y+1})`);\n      }\n      if(y-1>0){\n        adjSpaces.push(`(${x+1},${y-1})`);\n      }\n    }\n\n    if(y-1>0) {\n      adjSpaces.push(`(${x},${y-1})`);\n    }\n\n    if(y+1<9) {\n      adjSpaces.push(`(${x},${y+1})`);\n    }\n\n    // console.log(adjSpaces);\n\n    // this.getAdjOccupiedSpaces (adjSpaces, x, y);\n  }\n\n  // 在点完棋子后立马运行，而且只运行一次\n  validPathCheck = (x,y) => {\n      \n      let adjOccupiedSpaces = [];\n\n      nextValidPath = [];\n\n      this.adjSpaceCheck (x, y); /*返回adjSpaces[], 不可能是空值 */\n      \n      // check if the spaces in the ajacent spaces is occupied or not, if it's not occuppied, than make it valid, if it's occupied, position the next possible move\n      adjSpaces.map((item) => {\n          this.setState({\n            spaces: this.state.spaces.map((space)=>{\n                if(space.location === item){\n                  // console.log(space);\n                  if(space.isOccupied === false) {\n                    // validPath.push(space);\n                    space.isValidPath = true;\n                    space.className = `chess isValidPath`;\n                  }else{\n                    adjOccupiedSpaces.push(item);\n                  }\n                }\n                return space\n            })\n          })\n      })\n\n      // console.log(adjOccupiedSpaces);\n      // 把附近的occupied的格子储存放到一个数组中，然后计算这颗棋子要以这些格子作为基点分别怎么跳\n      if(adjOccupiedSpaces.length>0){\n        this.nextPossbileMoveCheck(adjOccupiedSpaces,x,y);\n      }else{\n        return;\n      }\n  }\n\n\n // check if the space is occupied or not\n  checkIfOccupied = () => {\n    occupiedSpaces = [];\n    this.state.spaces.map((space)=> {\n        this.state.chesses.map((chess)=>{\n          if(space.locationX === chess.currentX && space.locationY === chess.currentY){\n            occupiedSpaces.push(space);\n            space.value = chess.value;\n          }\n        })\n    });\n\n    this.setState({\n      spaces: this.state.spaces.map((space) => {\n          if (occupiedSpaces.includes(space)) {\n            space.isOccupied = true;\n          } else {\n            space.isOccupied = false;\n          }\n          return space\n      })\n    })\n\n    return occupiedSpaces;\n  }\n\n  // check if we have a winner\n  checkIfWinner = () => {\n    let blackBonusPoints = 0;\n    let greenBonusPoints = 0;\n\n    for (let y=1; y<5; y++) {\n      for (let x=1; x<(6-y); x++){\n          const theSpace = this.state.spaces.filter( space => space.locationX === x && space.locationY === y);\n          // console.log(theSpace);\n          if(theSpace[0].isOccupied && theSpace[0].value === 'Black') {\n            blackBonusPoints ++;\n            // console.log(`blackpionts: ${blackBonusPoints}`);\n\n          }\n      }\n    }\n\n    for (let y=5; y<9; y++) {\n      for (let x=8; x>(12-y); x--){\n          const theSpace = this.state.spaces.filter( space => space.locationX === x && space.locationY === y);\n          // console.log(theSpace);\n          if(theSpace[0].isOccupied && theSpace[0].value === 'Green') {\n            greenBonusPoints ++;\n            // console.log(`greenPoints: ${greenBonusPoints}`);\n          }\n      }\n    }\n\n    if(blackBonusPoints === 10){\n        blackWins = true;\n        this.gameOver();\n        return;\n    }\n\n    if(greenBonusPoints === 10){\n      greenWins = true;\n      this.gameOver();\n      return;\n    }\n    \n  }\n  \n  displayRules() {\n    const gameRuleDetail = document.querySelector('.gameRuleDetail');\n    const ruleBtn = document.querySelector('.ruleBtn');\n    if (gameRuleDetail.style.display === \"none\") {\n      gameRuleDetail.style.display = \"block\";\n      ruleBtn.value = \"HIDE RULES\";\n    } else {\n      gameRuleDetail.style.display = \"none\";\n      ruleBtn.value = \"GAME RULES\";\n    }\n\n  }\n\n  gameStart(e) {\n    const wallPaper = document.querySelector('.wallPaper');\n    const blackWinMsg = document.querySelector('.blackWins');\n    const greenWinMsg = document.querySelector('.greenWins');\n    const playerConncect = document.querySelector('.player-connect');\n    \n    blackWinMsg.style.display = 'none';\n    greenWinMsg.style.display = 'none';\n    playerConncect.style.display = 'none';\n    greenWins = false;\n    blackWins = false;\n\n    // change the text in the instruction cards\n    const instruTitle = document.querySelector('.instruTitle');\n    // socket emmit \n    if(e.target.id === 'greenPlayer'){\n      playerRole = 'Green';\n      socket.emit('gameStart', {\n        player: 'green'\n      });\n      instruTitle.innerHTML = `<p>Your Are Green Player<p>`;\n      document.querySelectorAll('.start').forEach((e) => {\n          e.style.display = 'none';\n      }) \n      document.querySelector('.restart').style.display = 'none';\n      // if it's a green player, freeze the black section\n      document.querySelectorAll('.Black').forEach((e)=> {\n        e.style.pointerEvents = 'none';\n      })\n    }else {\n      playerRole = 'Black';\n      socket.emit('gameStart', {\n        player: 'black'\n      });\n      instruTitle.innerHTML = `<p>Your Are Black Player<p>`;\n      document.querySelectorAll('.start').forEach((e) => {\n          e.style.display = 'none';\n      }) \n      document.querySelector('.restart').style.display = 'none';\n      // if it's a black player, freeze the green section\n      document.querySelectorAll('.Green').forEach((e)=> {\n          e.style.pointerEvents = 'none';\n      })\n    }\n    \n  }\n\n  gameOver() {\n    const wallPaper = document.querySelector('.wallPaper');\n    const blackWinMsg = document.querySelector('.blackWins');\n    const greenWinMsg = document.querySelector('.greenWins');\n    const restart = document.querySelector('.restart');\n\n    wallPaper.style.display = 'flex';\n    restart.style.display = 'block';\n\n    document.querySelectorAll('.start').forEach((e) => {\n      e.style.display = 'none';\n    }) \n\n    if (blackWins) {\n      blackWinMsg.style.display = 'block';\n    }\n    if (greenWins) {\n      greenWinMsg.style.display = 'block';\n    }\n\n  }\n\n  gameRestart() {\n    window.location.reload(false);\n  }\n\n  componentDidMount() {\n    this.setState({\n      ...this.getSpaces(),\n      ...this.getChesses(),\n    });\n\n    // update the isOccupied state of spaces constantly\n    setInterval(this.checkIfOccupied, 100);\n\n    // check winners constantly\n    setInterval(this.checkIfWinner, 100);\n\n    // initilize the content in instruction card\n    const ruleBtn = document.querySelector('.ruleBtn');\n    ruleBtn.value = \"GAME RULES\";\n\n    const instruction = document.querySelector('.instruction');\n    instruction.innerHTML = \"\";\n\n    const instruTitle = document.querySelector('.instruTitle');\n    instruTitle.innerHTML = \n    `<p>Let's Play Halma! <p>`;\n\n    // listerning to socket events -- chess moving \n    socket.on('chessMove', this.handleMove);\n\n    // listerning to socket events -- rival player enter\n    socket.on('player-connect', this.playConnect);\n    \n    // listerning to socket events -- rival player left\n    socket.on('player-disconnect', this.playDisconnect);\n\n    // listerning to socket events -- freezeScreen\n    socket.on('freezeScreen', this.freezeScreen);\n\n    // listerning to socket events -- unfreezeScreen\n    socket.on('unFreezeScreen', this.unFreezeScreen);\n\n    // listerning to socket events -- informRole\n    socket.on('informRole', this.informRole);\n    \n  }\n\n/********************************* define socket events ********************************************************/\nhandleMove = (data) => {\n  document.querySelectorAll(`.chess`).forEach((chess) => {\n      chess.style.boxShadow = \"none\";\n  })\n\n  document.querySelector(`#${data.id}`).style.transform = \"translate3d(\" + data.distanceX + \"vh, \" + data.distanceY + \"vh, 0)\";\n  document.querySelector(`#${data.id}`).style.boxShadow = \"0px 0px 10px 10px orange\";\n  console.log('moved');\n  this.setState({\n        chesses: this.state.chesses.map((chess)=>{\n          chess.isMoved = false;\n          if(chess.key == data.id){\n            chess.currentX = data.newLocationX;\n            chess.currentY = data.newLocationY;\n            chess.isMoved = true;\n            const instruction = document.querySelector('.instruction');\n            instruction.innerHTML = `${chess.OppoValue}'s turn!`;\n            activeChesses = `${chess.OppoValue}`;\n            nonActiveChesses = `${chess.value}`;\n          }\n          return chess;\n        }) \n  });\n\n  this.setState({\n    chesses: this.state.chesses.map((chess) => {\n      if(chess.OppoValue === activeChesses){\n        chess.className = `chess ${nonActiveChesses} disabled`;\n      }else {\n        chess.className = `chess ${activeChesses}`;\n      }\n      return chess;\n    })\n  });\n\n}\n\n  playConnect = () => {\n    document.querySelector('.player-connect').innerHTML = 'The room has two players, ready to start the game';\n    document.querySelector('.blackPlayer').style.pointerEvents = 'auto';\n    document.querySelector('.greenPlayer').style.pointerEvents = 'auto';\n  }\n\n\n  playDisconnect = () => {\n    document.querySelector('.player-connect').style.display = 'block';\n    document.querySelector('.player-connect').innerHTML = 'Your partner player left the room... game stopped';\n    document.querySelector('.wallPaper').style.display = 'flex';\n    document.querySelector('.greenPlayer').style.display = 'none';\n    document.querySelector('.blackPlayer').style.display = 'none';\n    document.querySelector('.restart').style.display = 'block';\n  }\n\n  freezeScreen = ()=> {\n    document.querySelector('.wallPaper').style.display = 'flex';\n    document.querySelectorAll('.start').forEach((e) => {\n        e.style.display = 'none';\n    }) \n    document.querySelector('.restart').style.display = 'none';\n  }\n\n  unFreezeScreen = ()=> {\n    document.querySelector('.wallPaper').style.display = 'none';\n    const instruction = document.querySelector('.instruction');\n    instruction.style.display = 'block';\n    instruction.innerHTML = `${playerRole}'s turn!`;\n  }\n\n  informRole = (data) => {\n    \n    // indicate the opponent user what player option left\n    if(data.player == 'green'){\n        document.querySelector('.greenPlayer').style.display = 'none';\n    }else if (data.player === 'black') {\n      document.querySelector('.blackPlayer').style.display = 'none';\n    }\n  }\n\n  render() {\n    let {spaces, chesses, zones} = this.state;\n    let positionSpaces = spaces.map((space,index)=> { \n      let {key, style, locationX, locationY, className, isValidPath} = space;\n      let reactDom = <div\n          key={key}\n          className={className}\n          onClick={this.chessMoveTo(locationX,locationY, isValidPath)}\n          style={{...style\n          }}\n        >\n        </div >\n      return reactDom;\n    });\n\n    let positionChesses = chesses.map((chess,index)=> { \n      let {key, style, locationX, locationY, currentX, currentY, className, value} = chess;\n      let reactDom = <div\n          value = {value}\n          id = {key}\n          key={key}\n          className={className}\n          onClick={this.selectChess(key,locationX,locationY, currentX, currentY)}\n          style={{...style\n          }}\n        >\n          {/* {key} */}\n        </div >\n      return reactDom;\n    })\n\n    let positionZones = zones.map((zone,index)=> { \n      let {key, style, className} = zone;\n      let reactDom = <div\n          key={key}\n          className={className}\n          style={{...style\n          }}\n        >\n          {/* {key} */}\n        </div >\n      return reactDom;\n    })\n\n    return (\n      <div className=\"App\">\n        <div className=\"wallPaper\">\n          <h1 className=\"greenWins\">Congrats! Green Wins!</h1>\n          <h1 className=\"blackWins\">Congrats! Black Wins!</h1>\n          <button id=\"blackPlayer\" className=\"start blackPlayer\" onClick={this.gameStart}>Play As Black</button>\n          <button id=\"greenPlayer\" className=\"start greenPlayer\" onClick={this.gameStart}>Play As Green</button>\n          <button className=\"restart wallBtn\" onClick={this.gameRestart}>RESTART</button>\n        </div>\n\n        <div className=\"boardWrapper\">\n          <div className=\"board\">\n              {positionSpaces}\n              {positionChesses}\n              {positionZones}\n          </div>\n        </div>\n\n        <div className=\"rule\">\n            <h1 className=\"gameTitle\">Halma</h1>\n            <h3 className=\"player-connect\">Waiting Another Player...</h3>\n            <h1 className=\"instruTitle\"></h1>\n            <div className=\"instruction\"></div>\n            <div className=\"gameRules\">\n              <input className=\"ruleBtn\" type=\"button\" onClick={this.displayRules}></input>\n            </div>\n            <ul className=\"gameRuleDetail\">\n              <li>(i) A piece may be moved to an adjacent square, horizontally, vertically or diagonally;</li>\n              <li>(ii) A piece may jump over a single adjacent piece of any colour, horizontally, vertically or diagonally, into the empty square beyond. Multiple jump over is allowable, as long as it is consistent.</li>\n              <li>(iii) The game is over when a player has moved all of his pieces into his opponent's marked starting positions</li>\n            </ul>\n        </div>\n\n        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}